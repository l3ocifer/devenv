---
# Install and configure Syncthing
- name: Install Syncthing
  block:
    - name: Install Syncthing (MacOS)
      community.general.homebrew_cask:
        name: syncthing
        state: present
      when: is_macos
      register: syncthing_macos_install
      
    - name: Install Syncthing (Linux)
      when: is_linux
      become: true
      block:
        - name: Add Syncthing repository key
          apt_key:
            url: https://syncthing.net/release-key.txt
            state: present
            id: 37C84554E7E0A261E4F76E1ED26E6ED000654A3E
          when: is_wsl
          register: syncthing_key_add
          
        - name: Add Syncthing repository
          apt_repository:
            repo: deb https://apt.syncthing.net/ syncthing stable
            state: present
            filename: syncthing
          when: is_wsl
          register: syncthing_repo_add
          
        - name: Install Syncthing package
          apt:
            name: syncthing
            state: present
            update_cache: yes
          register: syncthing_linux_install
  rescue:
    - name: Handle Syncthing installation failure
      debug:
        msg: "Failed to install Syncthing. Please check system requirements and try again."
  tags: ['syncthing']

# Create required directories
- name: Create Syncthing directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - "~/.config/syncthing"

- name: Load secrets from config directory
  ansible.builtin.include_vars:
    file: "{{ secrets_file }}"
    name: app_secrets
  ignore_errors: true

- name: Update secrets file with Syncthing configuration
  ansible.builtin.template:
    src: syncthing.yml.j2
    dest: "{{ secrets_file }}"
    mode: '0600'
  when: app_secrets is not defined or app_secrets.syncthing is not defined

- name: Configure Syncthing
  block:
    - name: Create temporary directory for Syncthing config
      tempfile:
        state: directory
        suffix: syncthing_config
      register: syncthing_temp_dir
      
    - name: Generate Syncthing configuration
      template:
        src: syncthing_config.xml.j2
        dest: "{{ syncthing_temp_dir.path }}/config.xml"
        mode: '0600'
      register: syncthing_config_template

    - name: Validate Syncthing configuration (MacOS)
      command: >
        /usr/local/bin/syncthing cli config validate {{ syncthing_config_template.dest }}
      register: syncthing_config_validate
      when: is_macos
      failed_when: syncthing_config_validate.rc != 0
      changed_when: false

    - name: Apply Syncthing configuration (MacOS)
      command: >
        /usr/local/bin/syncthing cli config update {{ syncthing_config_template.dest }}
      register: syncthing_config_update
      when: is_macos and syncthing_config_validate is success
      failed_when: syncthing_config_update.rc != 0

    - name: Configure Syncthing (Linux)
      template:
        src: syncthing_config.xml.j2
        dest: ~/.config/syncthing/config.xml
        mode: '0600'
        validate: 'syncthing cli config validate %s'
      register: syncthing_config
      when: not is_macos
  always:
    - name: Cleanup temporary directory
      file:
        path: "{{ syncthing_temp_dir.path }}"
        state: absent
      when: syncthing_temp_dir.path is defined
  tags: ['syncthing']

# Service Management
- name: Start Syncthing service (Linux)
  systemd:
    name: syncthing@{{ ansible_user_id }}
    state: started
    enabled: yes
  become: true
  when: is_linux
  tags: ['syncthing']

- name: Start Syncthing service (macOS)
  command: brew services start syncthing
  register: syncthing_service_start
  changed_when: "'Successfully started' in syncthing_service_start.stdout"
  failed_when: syncthing_service_start.rc != 0 and 'already started' not in syncthing_service_start.stderr
  when: is_macos
  tags: ['syncthing']

- name: Wait for Syncthing service
  wait_for:
    port: 8384
    timeout: 30
  when: syncthing_service_start is changed
  tags: ['syncthing']

# Verify Installation
- name: Verify Syncthing is running
  command: pgrep syncthing
  register: syncthing_check
  changed_when: false
  retries: 3
  delay: 5
  until: syncthing_check.rc == 0
  tags: ['syncthing']
