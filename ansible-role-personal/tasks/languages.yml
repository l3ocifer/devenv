---
# Common Development Tools
- name: Install common build tools
  package:
    name: "{{ item }}"
    state: present
  become: true
  with_items:
    - build-essential
    - git
    - curl
    - wget
  when: is_linux
  tags: ['languages']

# Rust Installation and Update
- name: Install/Update Rust via rustup
  shell: |
    if ! command -v rustup &> /dev/null; then
      curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    else
      rustup update
    fi
  args:
    creates: "{{ ansible_env.HOME }}/.cargo/bin/rustc"
  tags: ['languages']

# Python Setup via Miniconda
- name: Install miniconda
  block:
    - name: Download miniconda installer
      get_url:
        url: "https://repo.anaconda.com/miniconda/Miniconda3-latest-{{ 'MacOSX' if is_macos else 'Linux' }}-{{ 'arm64' if ansible_architecture == 'arm64' else 'x86_64' }}.sh"
        dest: "/tmp/miniconda.sh"
        mode: '0755'
      when: not ansible_check_mode
    
    - name: Run miniconda installer
      shell: /tmp/miniconda.sh -b -p {{ ansible_env.HOME }}/miniconda3
      args:
        creates: "{{ ansible_env.HOME }}/miniconda3/bin/conda"
      when: not ansible_check_mode
    
    - name: Install Python packages
      pip:
        name: "{{ languages.python.packages }}"
        state: latest
      environment:
        PATH: "{{ ansible_env.HOME }}/miniconda3/bin:{{ ansible_env.PATH }}"
  tags: ['languages']

# Node.js Setup
- name: Install Node.js via nvm
  shell: |
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    nvm install {{ languages.node.version }}
    nvm alias default {{ languages.node.version }}
    npm install -g {{ languages.node.packages | join(' ') }}
  args:
    executable: /bin/bash
    creates: "{{ ansible_env.HOME }}/.nvm/versions/node/v{{ languages.node.version }}"
  tags: ['languages']

# Ruby Setup
- name: Setup Ruby
  block:
    - name: Install rbenv
      package:
        name: rbenv
        state: present
      when: is_linux
    
    - name: Install Ruby version
      shell: |
        eval "$(rbenv init -)"
        rbenv install {{ languages.ruby.version }} -s
        rbenv global {{ languages.ruby.version }}
        gem install {{ languages.ruby.gems | join(' ') }}
      args:
        executable: /bin/bash
        creates: "{{ ansible_env.HOME }}/.rbenv/versions/{{ languages.ruby.version }}"
  tags: ['languages']

# Go Setup
- name: Install Go
  package:
    name: golang
    state: present
  become: true
  when: is_linux
  tags: ['languages']

- name: Set GOPATH
  lineinfile:
    path: "{{ ansible_env.HOME }}/.zshrc"
    line: 'export GOPATH="{{ ansible_env.HOME }}/go"'
    create: yes
  tags: ['languages']
