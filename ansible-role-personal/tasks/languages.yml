---
# Common Development Tools
- name: Install common build tools
  package:
    name: "{{ item }}"
    state: present
  become: true
  with_items:
    - build-essential
    - git
    - curl
    - wget
  when: is_linux
  tags: ['languages']

# Rust Installation and Update
- name: Check if Rust is installed
  stat:
    path: "{{ '~/.cargo/bin/rustc' | expanduser }}"
  register: rust_check
  tags: ['languages']

- name: Install/Update Rust via rustup
  shell: |
    if ! command -v rustup &> /dev/null; then
      curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    else
      rustup update
    fi
  args:
    creates: "{{ '~/.cargo/bin/rustc' | expanduser }}"
  when: not rust_check.stat.exists
  tags: ['languages']

# Python Setup via Miniconda
- name: Check if Miniconda is installed
  stat:
    path: "{{ '~/miniconda3/bin/conda' | expanduser }}"
  register: conda_check
  tags: ['languages']

- name: Install miniconda
  block:
    - name: Download miniconda installer
      get_url:
        url: "https://repo.anaconda.com/miniconda/Miniconda3-latest-{{ 'MacOSX' if is_macos else 'Linux' }}-{{ 'arm64' if ansible_architecture == 'arm64' else 'x86_64' }}.sh"
        dest: "/tmp/miniconda.sh"
        mode: '0755'
      when: not ansible_check_mode and not conda_check.stat.exists
    
    - name: Run miniconda installer
      shell: /tmp/miniconda.sh -b -p {{ '~/miniconda3' | expanduser }}
      args:
        creates: "{{ '~/miniconda3/bin/conda' | expanduser }}"
      when: not ansible_check_mode and not conda_check.stat.exists
    
    - name: Initialize conda in shell
      shell: |
        {{ '~/miniconda3/bin/conda' | expanduser }} init zsh
      args:
        creates: "{{ '~/.zshrc.pre-conda' | expanduser }}"
      when: not ansible_check_mode and not conda_check.stat.exists
    
    - name: Install Python packages
      pip:
        name: "{{ item }}"
        state: latest
        executable: "{{ '~/miniconda3/bin/pip' | expanduser }}"
      environment:
        PATH: "{{ '~/miniconda3/bin' | expanduser }}:{{ ansible_env.PATH }}"
      loop: "{{ languages.python.packages | default([]) }}"
      when: languages.python.packages is defined
  tags: ['languages']

# Node.js Setup
- name: Check if nvm is installed
  stat:
    path: "{{ '~/.nvm/nvm.sh' | expanduser }}"
  register: nvm_check
  tags: ['languages']

- name: Install nvm
  shell: |
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
  args:
    creates: "{{ '~/.nvm/nvm.sh' | expanduser }}"
  when: not nvm_check.stat.exists
  tags: ['languages']

- name: Install Node.js via nvm
  shell: |
    export NVM_DIR="{{ '~/.nvm' | expanduser }}"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    nvm install --lts
    nvm use --lts
  args:
    executable: /bin/bash
  when: not nvm_check.stat.exists
  tags: ['languages']

# Ruby Setup
- name: Setup Ruby
  block:
    - name: Install rbenv
      package:
        name: rbenv
        state: present
      when: is_linux
    
    - name: Install Ruby version
      shell: |
        eval "$(rbenv init -)"
        rbenv install {{ languages.ruby.version }} -s
        rbenv global {{ languages.ruby.version }}
        gem install {{ languages.ruby.gems | join(' ') }}
      args:
        executable: /bin/bash
        creates: "{{ ansible_env.HOME }}/.rbenv/versions/{{ languages.ruby.version }}"
  tags: ['languages']

# Go Setup
- name: Install Go
  package:
    name: golang
    state: present
  become: true
  when: is_linux
  tags: ['languages']

- name: Set GOPATH
  lineinfile:
    path: "{{ ansible_env.HOME }}/.zshrc"
    line: 'export GOPATH="{{ ansible_env.HOME }}/go"'
    create: yes
  tags: ['languages']
