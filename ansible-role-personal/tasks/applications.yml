---
# Ensure Homebrew is up to date
- name: Update Homebrew
  community.general.homebrew:
    update_homebrew: yes
  environment:
    HOMEBREW_NO_AUTO_UPDATE: 1
    HOMEBREW_NO_INSTALL_CLEANUP: 1
    HOMEBREW_NO_ENV_HINTS: 1
  when: is_macos
  tags: ['apps']

# Mac App Store
- name: Check Mac App Store registration
  ansible.builtin.command: mas list
  register: mas_list
  changed_when: false
  check_mode: no
  tags: ['mas']

- name: Check if Mac App Store apps exist
  ansible.builtin.stat:
    path: "/Applications/{{ item.name }}.app"
  loop: "{{ macos_mas_apps | selectattr('id', 'defined') | list }}"
  register: mas_app_check
  no_log: true
  tags: ['mas']

- name: Install Mac App Store applications
  community.general.mas:
    id: "{{ item.0.id }}"
    state: present
  loop: "{{ macos_mas_apps | selectattr('id', 'defined') | list | zip(mas_app_check.results) | list }}"
  when: not item.1.stat.exists
  register: mas_installation
  ignore_errors: true
  tags: ['mas']

- name: Display Mac App Store status
  ansible.builtin.debug:
    msg: "MAS: {{ item.item.0.name }} - {{ 'installed' if item.changed else 'exists' }}"
  loop: "{{ mas_installation.results }}"
  loop_control:
    label: "{{ item.item.0.name }}"
  when: item is defined and item.item is defined
  tags: ['mas']

# Homebrew Applications
- name: Check desktop applications
  ansible.builtin.stat:
    path: "/Applications/{{ item.name }}.app"
  loop: "{{ macos_apps | selectattr('brew', 'defined') | list }}"
  register: app_check
  no_log: true
  loop_control:
    label: "{{ item.name }}"
  tags: ['apps']

- name: Install desktop applications via Homebrew
  community.general.homebrew_cask:
    name: "{{ item.item.brew }}"
    state: present
  loop: "{{ app_check.results }}"
  when: not item.stat.exists
  register: brew_install
  tags: ['apps']

- name: Display Homebrew status
  ansible.builtin.debug:
    msg: "App: {{ item.item.item.name }} - {{ 'installed' if item.changed else 'exists' }}"
  loop: "{{ brew_install.results }}"
  loop_control:
    label: "{{ item.item.item.name }}"
  tags: ['apps']

# CLI Development Tools
- name: Get list of installed CLI tools
  ansible.builtin.command: "command -v {{ item.name }}"
  loop: "{{ cli_dev_tools }}"
  register: cli_check
  changed_when: false
  failed_when: false
  check_mode: no
  tags: ['apps']

- name: Install missing CLI development tools
  community.general.homebrew:
    name: "{{ item.item.name }}"
    state: present
  loop: "{{ cli_check.results }}"
  when: item.rc != 0
  register: cli_install
  tags: ['apps']

- name: Display CLI tool status
  ansible.builtin.debug:
    msg: "CLI: {{ item.item.item.name }} - {{ 'installed' if item.changed else 'exists' }}"
  loop: "{{ cli_install.results }}"
  loop_control:
    label: "{{ item.item.item.name }}"
  tags: ['apps']

# Direct Download Applications
- name: Check direct download applications
  ansible.builtin.stat:
    path: "/Applications/{{ item.name }}.app"
  loop: "{{ macos_apps | selectattr('url', 'defined') | list }}"
  register: direct_check
  tags: ['apps']

- name: Display direct download status
  ansible.builtin.debug:
    msg: "URL: {{ item.item.name }} - {{ 'manual download required' if not item.stat.exists else 'exists' }}"
  loop: "{{ direct_check.results }}"
  loop_control:
    label: "{{ item.item.name }}"
  when: not item.stat.exists
  tags: ['apps']

# Config Directories and Files
- name: Ensure parent config directory exists
  ansible.builtin.file:
    path: "~/.config/personal"
    state: directory
    mode: '0755'
  tags: ['config']

- name: Ensure application config directories exist
  ansible.builtin.file:
    path: "{{ item | dirname }}"
    state: directory
    mode: '0755'
  loop: "{{ config_symlinks | map(attribute='src') | map('expanduser') | list }}"
  tags: ['config']

- name: Create default config files if missing
  ansible.builtin.copy:
    content: "{}\n"
    dest: "{{ item.src | expanduser }}"
    force: false
    mode: '0644'
  loop: "{{ config_symlinks }}"
  tags: ['config']

- name: Ensure target config directories exist
  ansible.builtin.file:
    path: "{{ item | dirname }}"
    state: directory
    mode: '0755'
  loop: "{{ config_symlinks | map(attribute='dest') | map('expanduser') | list }}"
  tags: ['config']

- name: Create symlinks for application configs
  ansible.builtin.file:
    src: "{{ item.src | expanduser }}"
    dest: "{{ item.dest | expanduser }}"
    state: link
    force: true
  loop: "{{ config_symlinks }}"
  tags: ['config']

# CLI Tools Installation
- name: Check if CLI tools are installed
  command: "brew list --formula {{ item }}"
  register: cli_check
  changed_when: false
  failed_when: false
  no_log: true
  loop: "{{ cli_tools }}"
  loop_control:
    label: "{{ item }}"
  tags: ['cli']

- name: Install CLI tools via Homebrew
  community.general.homebrew:
    name: "{{ item.item }}"
    state: present
  environment:
    HOMEBREW_NO_AUTO_UPDATE: 1
    HOMEBREW_NO_INSTALL_CLEANUP: 1
    HOMEBREW_NO_ENV_HINTS: 1
  with_items: "{{ cli_check.results }}"
  when: is_macos and item.rc != 0 and not ansible_check_mode
  tags: ['cli']

# Linux Applications
- name: Check if Linux applications are installed
  shell: "dpkg -l | grep -w '^ii.*{{ item }}' || true"
  register: linux_check
  changed_when: false
  with_items:
    - podman
    - chromium-browser
    - obs-studio
    - vim
    - git
    - terraform
    - kubectl
    - helm
    - jq
    - yq
    - ripgrep
    - fd-find
    - bat
    - eza
    - tmux
    - direnv
  when: is_linux
  tags: ['apps']

- name: Install Linux applications
  apt:
    name: "{{ item.item }}"
    state: present
  with_items: "{{ linux_check.results }}"
  when: is_linux and item.stdout == ''
  become: true
  tags: ['apps']

# Docker installation for Linux
- name: Check if Docker is installed
  shell: "docker --version || true"
  register: docker_check
  changed_when: false
  when: is_linux
  tags: ['apps']

- name: Install Docker on Linux
  block:
    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      
    - name: Add Docker repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present
        
    - name: Install Docker packages
      apt:
        name: 
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
  when: is_linux and docker_check.rc != 0
  become: true
  tags: ['apps']

# Ensure proper permissions for Docker socket
- name: Ensure Docker socket permissions
  file:
    path: /var/run/docker.sock
    mode: '0666'
  become: true
  when: is_macos
  ignore_errors: yes
  tags: ['apps']

# Configure Colima (Docker alternative)
- name: Check Colima status
  shell: "colima status || true"
  register: colima_check
  changed_when: false
  when: is_macos
  tags: ['apps']

- name: Configure Colima
  shell: |
    colima stop || true
    colima start --cpu 4 --memory 8 --disk 100
  when: is_macos and colima_check.rc != 0
  changed_when: false
  tags: ['apps']

# Post-installation checks
- name: Verify installations
  shell: "{{ item }}"
  register: check_result
  changed_when: false
  failed_when: false
  with_items:
    - "docker --version"
    - "colima status"
    - "podman --version"
    - "zed --version"
    - "cursor --version"
    - "vlc --version"
  when: is_macos
  tags: ['apps']

- name: Display installation results
  debug:
    var: check_result
  when: is_macos
  tags: ['apps']

# WSL specific setup
- name: Configure WSL specific tools
  block:
    - name: Install WSL tools
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - wslu  # WSL utilities
  when: is_wsl
  become: true
  tags: ['wsl']

# Python tools
- name: Install Python tools
  pip:
    name: "{{ item }}"
    state: present
    extra_args: --user
  with_items:
    - thefuck
    - aichat
    - sherlock
  when: not is_macos
  tags: ['python']

# Shell tools for non-MacOS
- name: Install shell tools on Linux
  block:
    - name: Install Starship
      shell: curl -sS https://starship.rs/install.sh | sh -s -- -y
      
    - name: Install Zoxide
      shell: curl -sS https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | bash
      
    - name: Install Atuin
      shell: bash <(curl https://raw.githubusercontent.com/atuinsh/atuin/main/install.sh)
      
    - name: Install Bun
      shell: curl -fsSL https://bun.sh/install | bash
  when: not is_macos
  tags: ['shell']

# Configure AI tools
- name: Pull llama3.2 3B model for ollama
  shell: "ollama pull llama3.2:3b -q"
  register: ollama_pull
  changed_when: ollama_pull.rc == 0
  failed_when: false
  when: is_macos
  tags: ['apps']

- name: Configure aichat to use ollama's llama3.2
  copy:
    dest: "~/.config/aichat/config.yaml"
    content: |
      # aichat configuration
      model: llama3.2
      provider: ollama
      api_base: http://localhost:11434/api
    mode: '0600'
  when: is_macos
  tags: ['apps']

# Zsh plugins
- name: Check if Zsh plugins exist
  stat:
    path: "{{ oh_my_zsh_custom }}/plugins/{{ item.name }}"
  with_items: "{{ zsh_plugins }}"
  register: zsh_plugins_check
  no_log: true
  loop_control:
    label: "{{ item.name }}"
  tags: ['zsh']

- name: Install Zsh plugins
  git:
    repo: "{{ item.item.repo }}"
    dest: "{{ oh_my_zsh_custom }}/plugins/{{ item.item.name }}"
    depth: 1
  with_items: "{{ zsh_plugins_check.results }}"
  when: not item.stat.exists
  no_log: "{{ not ansible_verbosity | bool }}"
  tags: ['zsh']
