---
- name: Run preflight checks
  ansible.builtin.include_tasks: preflight.yml

- name: Get local system specifications
  ansible.builtin.setup:
    gather_subset:
      - hardware
  register: local_specs

- name: Calculate required instance type
  ansible.builtin.set_fact:
    required_ram_gb: "{{ (local_specs.ansible_facts.ansible_memtotal_mb / 1024) | round | int }}"
    required_cpu: "{{ local_specs.ansible_facts.ansible_processor_vcpus }}"

- name: Determine AWS instance type
  ansible.builtin.set_fact:
    selected_instance_type: "{{ instance_type_map[target_env].type }}"
    required_ram_gb: "{{ instance_type_map[target_env].ram_gb }}"
    required_vcpus: "{{ instance_type_map[target_env].vcpus }}"

- name: Create AWS VPC for testing
  amazon.aws.ec2_vpc_net:
    name: "{{ vpc_config.name }}"
    cidr_block: "{{ vpc_config.cidr }}"
    region: "{{ aws_region }}"
    dns_hostnames: "{{ vpc_config.enable_dns_hostnames }}"
    dns_support: "{{ vpc_config.enable_dns_support }}"
    tags: "{{ vpc_config.tags }}"
  register: test_vpc

- name: Create internet gateway
  amazon.aws.ec2_vpc_igw:
    vpc_id: "{{ test_vpc.vpc.id }}"
    region: "{{ aws_region }}"
    tags:
      Name: "{{ vpc_config.name }}-igw"
      AutoRemove: "yes"
  register: test_igw

- name: Create NAT Gateway EIP
  amazon.aws.ec2_eip:
    region: "{{ aws_region }}"
    tags:
      Name: "{{ vpc_config.name }}-nat-eip"
      AutoRemove: "yes"
  register: nat_eip
  when: nat_gateway_config.enabled

- name: Create NAT Gateway
  amazon.aws.ec2_vpc_nat_gateway:
    state: present
    subnet_id: "{{ public_subnet_1.subnet.id }}"
    allocation_id: "{{ nat_eip.allocation_id }}"
    region: "{{ aws_region }}"
    tags:
      Name: "{{ nat_gateway_config.name }}"
      AutoRemove: "yes"
  register: nat_gateway
  when: nat_gateway_config.enabled

- name: Create public subnets
  amazon.aws.ec2_vpc_subnet:
    vpc_id: "{{ test_vpc.vpc.id }}"
    cidr: "{{ item.value.cidr }}"
    az: "{{ item.value.az }}"
    region: "{{ aws_region }}"
    map_public: "{{ item.value.map_public_ip }}"
    tags: "{{ item.value.tags | combine({'Name': item.value.name}) }}"
  loop: "{{ subnet_config | dict2items | selectattr('key', 'match', '^public_') | list }}"
  register: public_subnets

- name: Create private subnets
  amazon.aws.ec2_vpc_subnet:
    vpc_id: "{{ test_vpc.vpc.id }}"
    cidr: "{{ item.value.cidr }}"
    az: "{{ item.value.az }}"
    region: "{{ aws_region }}"
    map_public: "{{ item.value.map_public_ip }}"
    tags: "{{ item.value.tags | combine({'Name': item.value.name}) }}"
  loop: "{{ subnet_config | dict2items | selectattr('key', 'match', '^private_') | list }}"
  register: private_subnets

- name: Create route table
  amazon.aws.ec2_vpc_route_table:
    vpc_id: "{{ test_vpc.vpc.id }}"
    region: "{{ aws_region }}"
    tags:
      Name: "{{ vpc_config.name }}-rt"
      AutoRemove: "yes"
    subnets: ["{{ public_subnet.subnet.id }}"]
    routes:
      - dest: "0.0.0.0/0"
        gateway_id: "{{ test_igw.gateway_id }}"
  register: route_table

- name: Create security group
  amazon.aws.ec2_security_group:
    name: "{{ security_groups.test_instances.name }}"
    description: "{{ security_groups.test_instances.description }}"
    vpc_id: "{{ test_vpc.vpc.id }}"
    region: "{{ aws_region }}"
    rules: "{{ security_groups.test_instances.rules.ingress }}"
    rules_egress: "{{ security_groups.test_instances.rules.egress }}"
    tags:
      AutoRemove: "yes"
  register: test_sg

- name: Launch test instance
  amazon.aws.ec2_instance:
    name: "homelab-test-{{ ansible_date_time.epoch }}"
    instance_type: "{{ selected_instance_type }}"
    security_group: "{{ test_sg.group_id }}"
    vpc_subnet_id: "{{ test_subnet.subnet.id }}"
    region: "{{ aws_region }}"
    image_id: "{{ 'ami-0c7217cdde317cfec' if target_env == 'raspberry_pi' else 'ami-0c7217cdde317cfec' }}"
    key_name: "{{ ssh_key_name }}"
    wait: yes
    tags:
      Name: "homelab-test-{{ target_env }}"
      Environment: test
      AutoRemove: "yes"
  register: test_instance

- name: Add instance to inventory
  ansible.builtin.add_host:
    name: "{{ test_instance.instances[0].public_ip_address }}"
    group: test_instances
    ansible_user: ubuntu
    ansible_ssh_private_key_file: "{{ ssh_key_path }}"

- name: Wait for SSH
  ansible.builtin.wait_for:
    host: "{{ test_instance.instances[0].public_ip_address }}"
    port: 22
    timeout: 300

- name: Run role tests
  ansible.builtin.include_role:
    name: "{{ item }}"
  loop: "{{ roles_to_test }}"
  delegate_to: "{{ test_instance.instances[0].public_ip_address }}"

- name: Verify role deployment
  ansible.builtin.include_tasks: verify.yml
  loop: "{{ roles_to_test }}"
  retries: "{{ verification_retries }}"
  delay: "{{ verification_delay }}"
  register: verification_result
  until: verification_result is success

- name: Cleanup AWS resources
  ansible.builtin.include_tasks: cleanup.yml
  when: cleanup_on_success or (not verification_result is success and cleanup_on_failure)

- name: Create private route tables
  amazon.aws.ec2_vpc_route_table:
    vpc_id: "{{ test_vpc.vpc.id }}"
    region: "{{ aws_region }}"
    tags:
      Name: "{{ vpc_config.name }}-private-rt"
      AutoRemove: "yes"
    subnets: "{{ private_subnets.results | map(attribute='subnet.id') | list }}"
    routes:
      - dest: "0.0.0.0/0"
        gateway_id: "{{ nat_gateway.nat_gateway_id }}"
  register: private_route_table
  when: nat_gateway_config.enabled

- name: Configure instance SSH settings
  amazon.aws.ec2_instance:
    instance_ids: "{{ test_instance.instances[0].instance_id }}"
    region: "{{ aws_region }}"
    state: present
    user_data: |
      #!/bin/bash
      useradd -m -s /bin/bash {{ ssh_config.user }}
      mkdir -p /home/{{ ssh_config.user }}/.ssh
      echo "{{ lookup('file', ssh_config.public_key_path) }}" > /home/{{ ssh_config.user }}/.ssh/authorized_keys
      chown -R {{ ssh_config.user }}:{{ ssh_config.user }} /home/{{ ssh_config.user }}/.ssh
      chmod 700 /home/{{ ssh_config.user }}/.ssh
      chmod 600 /home/{{ ssh_config.user }}/.ssh/authorized_keys
      echo "{{ ssh_config.user }} ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/{{ ssh_config.user }}
  when: test_instance is defined

- name: Wait for user setup
  pause:
    seconds: 30
  when: test_instance is defined
