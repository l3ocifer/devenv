---
# Update cleanup order for dependencies
- name: Delete load balancer
  amazon.aws.elb_application_lb:
    name: "{{ load_balancer_config.name }}"
    state: absent
    region: "{{ aws_region }}"
    wait: yes
  when: deployment_type | default('test') == 'prod' and load_balancer_config.enabled and load_balancer is defined and cleanup_requested | default(false)

- name: Delete target group
  community.aws.elb_target_group:
    name: "{{ load_balancer_config.name }}-tg"
    state: absent
    region: "{{ aws_region }}"
  when: deployment_type | default('test') == 'prod' and load_balancer_config.enabled and target_group is defined and cleanup_requested | default(false)

- name: Delete load balancer security group
  amazon.aws.ec2_security_group:
    group_id: "{{ lb_sg.group_id }}"
    state: absent
    region: "{{ aws_region }}"
  when: deployment_type | default('test') == 'prod' and lb_sg is defined and cleanup_requested | default(false)
  retries: 3
  delay: 10

- name: Terminate instance
  amazon.aws.ec2_instance:
    instance_ids: "{{ test_instance.instances[0].instance_id }}"
    state: absent
    region: "{{ aws_region }}"
    wait: yes
  when: cleanup_enabled | bool and test_instance is defined

- name: Delete NAT Gateway
  amazon.aws.ec2_vpc_nat_gateway:
    nat_gateway_id: "{{ item.nat_gateway_id }}"
    state: absent
    region: "{{ aws_region }}"
    wait: yes
  loop: "{{ existing_nat_gateways.result | default([]) }}"
  when: cleanup_enabled | bool and nat_gateway_config.enabled

- name: Wait for NAT Gateway deletion
  amazon.aws.ec2_vpc_nat_gateway_info:
    region: "{{ aws_region }}"
    nat_gateway_ids: "{{ item.nat_gateway_id }}"
  register: nat_gateway_status
  until: nat_gateway_status.result | length == 0
  retries: 30
  delay: 10
  loop: "{{ existing_nat_gateways.result | default([]) }}"
  when: cleanup_enabled | bool and nat_gateway_config.enabled

- name: Release EIPs
  amazon.aws.ec2_eip:
    allocation_id: "{{ item.allocation_id }}"
    state: absent
    region: "{{ aws_region }}"
  loop: "{{ existing_eips.addresses | default([]) }}"
  when: cleanup_enabled | bool and nat_gateway_config.enabled

- name: Delete route tables
  amazon.aws.ec2_vpc_route_table:
    vpc_id: "{{ test_vpc.vpc.id }}"
    route_table_id: "{{ item }}"
    lookup: id
    state: absent
    region: "{{ aws_region }}"
  loop:
    - "{{ public_route_table.route_table.id | default(omit) }}"
    - "{{ private_route_table.route_table.id | default(omit) }}"
  when: cleanup_enabled | bool and (public_route_table is defined or private_route_table is defined)
  ignore_errors: true

- name: Delete VPC and dependencies
  amazon.aws.ec2_vpc_net:
    name: "{{ vpc_config.name }}"
    state: absent
    region: "{{ aws_region }}"
  when: cleanup_enabled | bool and test_vpc is defined

- name: Delete instance security group
  amazon.aws.ec2_security_group:
    group_id: "{{ test_sg.group_id }}"
    state: absent
    region: "{{ aws_region }}"
  when: cleanup_enabled | bool and test_sg is defined
  retries: 3
  delay: 10

- name: Delete internet gateway
  amazon.aws.ec2_vpc_igw:
    vpc_id: "{{ test_vpc.vpc.id }}"
    state: absent
    region: "{{ aws_region }}"
  when: cleanup_enabled | bool and test_igw is defined
