---
- name: Run preflight checks
  ansible.builtin.include_tasks: preflight.yml

- name: Get local system specifications
  ansible.builtin.setup:
    gather_subset:
      - hardware
  register: local_specs

- name: Calculate required instance type
  ansible.builtin.set_fact:
    required_ram_gb: "{{ (local_specs.ansible_facts.ansible_memtotal_mb / 1024) | round | int }}"
    required_cpu: "{{ local_specs.ansible_facts.ansible_processor_vcpus }}"

- name: Determine AWS instance type
  ansible.builtin.set_fact:
    selected_instance_type: "{{ instance_type_map[target_env].type }}"
    required_ram_gb: "{{ instance_type_map[target_env].ram_gb }}"
    required_vcpus: "{{ instance_type_map[target_env].vcpus }}"

- name: Create AWS VPC for testing
  amazon.aws.ec2_vpc_net:
    name: "{{ vpc_config.name }}"
    cidr_block: "{{ vpc_config.cidr }}"
    region: "{{ aws_region }}"
    dns_hostnames: "{{ vpc_config.enable_dns_hostnames }}"
    dns_support: "{{ vpc_config.enable_dns_support }}"
    tags: "{{ vpc_config.tags }}"
  register: test_vpc

- name: Create internet gateway
  amazon.aws.ec2_vpc_igw:
    vpc_id: "{{ test_vpc.vpc.id }}"
    region: "{{ aws_region }}"
    tags:
      Name: "{{ vpc_config.name }}-igw"
      AutoRemove: "yes"
  register: test_igw

- name: Create public subnets
  amazon.aws.ec2_vpc_subnet:
    vpc_id: "{{ test_vpc.vpc.id }}"
    cidr: "{{ item.value.cidr }}"
    az: "{{ item.value.az }}"
    region: "{{ aws_region }}"
    map_public: "{{ item.value.map_public_ip }}"
    tags: "{{ item.value.tags | combine({'Name': item.value.name}) }}"
  loop: "{{ subnet_config | dict2items | selectattr('key', 'match', '^public_') | list }}"
  register: public_subnets

- name: Create private subnets
  amazon.aws.ec2_vpc_subnet:
    vpc_id: "{{ test_vpc.vpc.id }}"
    cidr: "{{ item.value.cidr }}"
    az: "{{ item.value.az }}"
    region: "{{ aws_region }}"
    map_public: "{{ item.value.map_public_ip }}"
    tags: "{{ item.value.tags | combine({'Name': item.value.name}) }}"
  loop: "{{ subnet_config | dict2items | selectattr('key', 'match', '^private_') | list }}"
  register: private_subnets

- name: Create NAT Gateway EIP
  amazon.aws.ec2_eip:
    region: "{{ aws_region }}"
    tags:
      Name: "{{ vpc_config.name }}-nat-eip"
      AutoRemove: "yes"
  register: nat_eip
  when: nat_gateway_config.enabled

- name: Create NAT Gateway
  amazon.aws.ec2_vpc_nat_gateway:
    state: present
    subnet_id: "{{ public_subnets.results[0].subnet.id }}"
    allocation_id: "{{ nat_eip.allocation_id }}"
    region: "{{ aws_region }}"
    tags:
      Name: "{{ nat_gateway_config.name }}"
      AutoRemove: "yes"
  register: nat_gateway
  when: nat_gateway_config.enabled

- name: Create security group
  amazon.aws.ec2_security_group:
    name: "{{ security_groups.test_instances.name }}"
    description: "{{ security_groups.test_instances.description }}"
    vpc_id: "{{ test_vpc.vpc.id }}"
    region: "{{ aws_region }}"
    rules: "{{ security_groups.test_instances.rules.ingress }}"
    rules_egress: "{{ security_groups.test_instances.rules.egress }}"
    tags:
      AutoRemove: "yes"
  register: test_sg

- name: Create public route table
  amazon.aws.ec2_vpc_route_table:
    vpc_id: "{{ test_vpc.vpc.id }}"
    region: "{{ aws_region }}"
    tags:
      Name: "{{ vpc_config.name }}-public-rt"
      AutoRemove: "yes"
    subnets: "{{ public_subnets.results | map(attribute='subnet.id') | list }}"
    routes:
      - dest: "0.0.0.0/0"
        gateway_id: "{{ test_igw.gateway_id }}"
  register: public_route_table

- name: Create private route table
  amazon.aws.ec2_vpc_route_table:
    vpc_id: "{{ test_vpc.vpc.id }}"
    region: "{{ aws_region }}"
    tags:
      Name: "{{ vpc_config.name }}-private-rt"
      AutoRemove: "yes"
    subnets: "{{ private_subnets.results | map(attribute='subnet.id') | list }}"
    routes:
      - dest: "0.0.0.0/0"
        nat_gateway_id: "{{ nat_gateway.nat_gateway_id }}"
  register: private_route_table
  when: nat_gateway is defined

- name: Launch test instance
  amazon.aws.ec2_instance:
    name: "{{ environment_prefix }}-{{ target_env }}-{{ ansible_date_time.epoch }}"
    instance_type: "{{ selected_instance_type }}"
    security_group: "{{ test_sg.group_id }}"
    vpc_subnet_id: "{{ private_subnets.results[0].subnet.id }}"
    region: "{{ aws_region }}"
    image_id: "{{ ami_map[target_env] }}"
    key_name: "{{ ssh_config.key_name }}"
    private_ip_address: "{{ static_ip_map[target_env].private_ip }}"
    iam_instance_profile: "SSMInstanceProfile"
    tags:
      Name: "{{ environment_prefix }}-{{ target_env }}"
      AutoRemove: "yes"
  register: test_instance

- name: Create load balancer security group
  amazon.aws.ec2_security_group:
    name: "{{ load_balancer_config.name }}-sg"
    description: "Security group for load balancer"
    vpc_id: "{{ test_vpc.vpc.id }}"
    region: "{{ aws_region }}"
    rules: "{{ load_balancer_config.security_group_rules }}"
    tags:
      AutoRemove: "yes"
  register: lb_sg
  when: load_balancer_config.enabled

- name: Create target group
  community.aws.elb_target_group:
    name: "{{ load_balancer_config.name }}-tg"
    protocol: "HTTP"
    port: 80
    vpc_id: "{{ test_vpc.vpc.id }}"
    health_check_protocol: "HTTP"
    health_check_path: "/health"
    health_check_interval: 30
    health_check_timeout: 5
    healthy_threshold_count: 2
    unhealthy_threshold_count: 2
    region: "{{ aws_region }}"
    tags:
      AutoRemove: "yes"
  register: target_group
  when: load_balancer_config.enabled

- name: Create load balancer
  community.aws.elb_application_lb:
    name: "{{ load_balancer_config.name }}"
    security_groups: ["{{ lb_sg.group_id }}"]
    subnets: "{{ load_balancer_config.subnets }}"
    listeners: "{{ load_balancer_config.listeners }}"
    state: present
    region: "{{ aws_region }}"
    tags:
      AutoRemove: "yes"
  register: load_balancer
  when: load_balancer_config.enabled

- name: Register instance with target group
  community.aws.elb_target:
    target_group_arn: "{{ target_group.target_group_arn }}"
    target_id: "{{ test_instance.instances[0].instance_id }}"
    state: present
    region: "{{ aws_region }}"
  when: load_balancer_config.enabled

- name: Configure instance SSH settings
  amazon.aws.ec2_instance:
    instance_ids: "{{ test_instance.instances[0].instance_id }}"
    region: "{{ aws_region }}"
    state: present
    user_data: |
      #!/bin/bash
      useradd -m -s /bin/bash {{ ssh_config.user }}
      mkdir -p /home/{{ ssh_config.user }}/.ssh
      echo "{{ lookup('file', ssh_config.public_key_path) }}" > /home/{{ ssh_config.user }}/.ssh/authorized_keys
      chown -R {{ ssh_config.user }}:{{ ssh_config.user }} /home/{{ ssh_config.user }}/.ssh
      chmod 700 /home/{{ ssh_config.user }}/.ssh
      chmod 600 /home/{{ ssh_config.user }}/.ssh/authorized_keys
      echo "{{ ssh_config.user }} ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/{{ ssh_config.user }}
  when: test_instance is defined

- name: Wait for user setup
  pause:
    seconds: 30
  when: test_instance is defined
