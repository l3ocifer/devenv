---
- name: Run preflight checks
  ansible.builtin.include_tasks: preflight.yml

- name: Determine AWS instance type
  ansible.builtin.set_fact:
    selected_instance_type: "{{ instance_type_map[target_env].type }}"

- name: Create AWS VPC for testing
  amazon.aws.ec2_vpc_net:
    name: "{{ vpc_config.name }}"
    cidr_block: "{{ vpc_config.cidr }}"
    region: "{{ aws_region }}"
    dns_hostnames: "{{ vpc_config.enable_dns_hostnames }}"
    dns_support: "{{ vpc_config.enable_dns_support }}"
    tags: "{{ vpc_config.tags }}"
  register: test_vpc

- name: Create internet gateway
  amazon.aws.ec2_vpc_igw:
    vpc_id: "{{ test_vpc.vpc.id }}"
    region: "{{ aws_region }}"
    tags:
      Name: "{{ vpc_config.name }}-igw"
      AutoRemove: "yes"
  register: test_igw

- name: Create public subnets
  amazon.aws.ec2_vpc_subnet:
    vpc_id: "{{ test_vpc.vpc.id }}"
    cidr: "{{ item.value.cidr }}"
    az: "{{ item.value.az }}"
    region: "{{ aws_region }}"
    map_public: "{{ item.value.map_public_ip }}"
    tags: "{{ item.value.tags | combine({'Name': item.value.name}) }}"
  loop: "{{ subnet_config | dict2items | selectattr('key', 'match', '^public_') | list }}"
  register: public_subnets

- name: Create private subnets
  amazon.aws.ec2_vpc_subnet:
    vpc_id: "{{ test_vpc.vpc.id }}"
    cidr: "{{ item.value.cidr }}"
    az: "{{ item.value.az }}"
    region: "{{ aws_region }}"
    map_public: "{{ item.value.map_public_ip }}"
    tags: "{{ item.value.tags | combine({'Name': item.value.name}) }}"
  loop: "{{ subnet_config | dict2items | selectattr('key', 'match', '^private_') | list }}"
  register: private_subnets

- name: Create NAT Gateway EIP
  amazon.aws.ec2_eip:
    region: "{{ aws_region }}"
    tags:
      Name: "{{ nat_gateway_config.name }}-eip"
      Environment: "{{ deployment_mode }}"
      AutoRemove: "{{ test_mode | default(true) | string }}"
    reuse_existing_ip_allowed: true
    in_vpc: true
    state: present
  register: nat_eip
  when: nat_gateway_config.enabled

- name: Create NAT Gateway
  amazon.aws.ec2_vpc_nat_gateway:
    state: present
    subnet_id: "{{ public_subnets.results[0].subnet.id }}"
    allocation_id: "{{ nat_eip.allocation_id }}"
    region: "{{ aws_region }}"
    wait: true
    wait_timeout: 600
    tags: "{{ nat_gateway_config.tags }}"
  register: nat_gateway
  when: nat_gateway_config.enabled

- name: Create security group
  amazon.aws.ec2_security_group:
    name: "{{ security_groups.test_instances.name }}"
    description: "{{ security_groups.test_instances.description }}"
    vpc_id: "{{ test_vpc.vpc.id }}"
    region: "{{ aws_region }}"
    rules: "{{ security_groups.test_instances.rules.ingress }}"
    rules_egress: "{{ security_groups.test_instances.rules.egress }}"
    tags:
      AutoRemove: "yes"
  register: test_sg

- name: Create public route table
  amazon.aws.ec2_vpc_route_table:
    vpc_id: "{{ test_vpc.vpc.id }}"
    region: "{{ aws_region }}"
    tags:
      Name: "{{ vpc_config.name }}-public-rt"
      AutoRemove: "yes"
    subnets: "{{ public_subnets.results | map(attribute='subnet.id') | list }}"
    routes:
      - dest: "0.0.0.0/0"
        gateway_id: "{{ test_igw.gateway_id }}"
  register: public_route_table

- name: Create private route table
  amazon.aws.ec2_vpc_route_table:
    vpc_id: "{{ test_vpc.vpc.id }}"
    region: "{{ aws_region }}"
    tags:
      Name: "{{ vpc_config.name }}-private-rt"
      AutoRemove: "yes"
    subnets: "{{ private_subnets.results | map(attribute='subnet.id') | list }}"
    routes:
      - dest: "0.0.0.0/0"
        nat_gateway_id: "{{ nat_gateway.nat_gateway_id }}"
    lookup: tag:Name
  register: private_route_table
  when: nat_gateway is defined

- name: Launch test instances
  amazon.aws.ec2_instance:
    name: "{{ environment_prefix }}-{{ target_env }}-{{ '%02d' | format(item) }}"
    instance_type: "{{ selected_instance_type }}"
    region: "{{ aws_region }}"
    image_id: "{{ ami_map[target_env] }}"
    key_name: "{{ ssh_config.key_name }}"
    iam_instance_profile: "SSMInstanceProfile"
    vpc_subnet_id: "{{ private_subnets.results[0].subnet.id }}"
    security_groups: ["{{ test_sg.group_id }}"]
    state: present
    exact_count: "{{ instance_count }}"
    count_tag:
      Name: "{{ environment_prefix }}-{{ target_env }}"
      AutoRemove: "yes"
    tags:
      Name: "{{ environment_prefix }}-{{ target_env }}"
      AutoRemove: "yes"
  register: test_instance
  loop: "{{ range(1, instance_count + 1) | list }}"

- name: Wait for instances to be ready
  ansible.builtin.wait_for:
    timeout: "{{ test_timeout_minutes * 60 }}"
  register: instance_wait
  failed_when: false
  until: instance_wait is success
  retries: "{{ instance_check_retries }}"
  delay: "{{ instance_check_delay }}"
  when: test_instance is changed

- name: Check instance status
  amazon.aws.ec2_instance_info:
    instance_ids: "{{ test_instance.results | map(attribute='instance_ids') | flatten }}"
    region: "{{ aws_region }}"
  register: instance_status
  until: instance_status.instances | map(attribute='state.name') | list | unique == ['running']
  retries: "{{ instance_check_retries }}"
  delay: "{{ instance_check_delay }}"
  when: test_instance is changed

- name: Verify SSM connectivity
  community.aws.aws_ssm_parameter_info:
    name: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
    region: "{{ aws_region }}"
  register: ssm_check
  until: ssm_check is success
  retries: "{{ instance_check_retries }}"
  delay: "{{ instance_check_delay }}"
  when: test_instance is changed

- name: Check SSM instance status
  amazon.aws.aws_ssm_info:
    region: "{{ aws_region }}"
    instance_information_filter:
      - key: InstanceIds
        values: "{{ test_instance.results | map(attribute='instance_ids') | flatten | list }}"
  register: ssm_instance_status
  until: ssm_instance_status.instance_information | map(attribute='PingStatus') | list | unique == ['Online']
  retries: "{{ instance_check_retries }}"
  delay: "{{ instance_check_delay }}"
  when: test_instance is changed

- name: Warn if instances are not accessible via SSM
  ansible.builtin.fail:
    msg: "Warning: Some instances are not accessible via SSM after {{ test_timeout_minutes }} minutes. Check IAM roles and security groups."
  when: test_instance is changed and (ssm_check.failed is defined or ssm_instance_status.instance_information | length == 0)

- name: Create load balancer security group
  amazon.aws.ec2_security_group:
    name: "{{ load_balancer_config.name }}-sg"
    description: "Security group for load balancer"
    vpc_id: "{{ test_vpc.vpc.id }}"
    region: "{{ aws_region }}"
    rules: "{{ load_balancer_config.security_group_rules }}"
    tags:
      AutoRemove: "yes"
  register: lb_sg
  when: not test_mode | default(true)

- name: Create target group
  community.aws.elb_target_group:
    name: "{{ load_balancer_config.name }}-tg"
    protocol: "HTTP"
    port: 80
    vpc_id: "{{ test_vpc.vpc.id }}"
    health_check_protocol: "HTTP"
    health_check_path: "/health"
    health_check_interval: 30
    health_check_timeout: 5
    healthy_threshold_count: 2
    unhealthy_threshold_count: 2
    region: "{{ aws_region }}"
    tags:
      AutoRemove: "yes"
  register: target_group
  when: not test_mode | default(true)

- name: Set load balancer listeners
  ansible.builtin.set_fact:
    lb_listeners:
      - port: 80
        protocol: "HTTP"
        default_actions:
          - type: "forward"
            target_group_arn: "{{ target_group.target_group_arn }}"
      - port: 443
        protocol: "HTTPS"
        ssl_policy: "ELBSecurityPolicy-2016-08"
        certificates: []  # Add certificate ARNs for prod
        default_actions:
          - type: "forward"
            target_group_arn: "{{ target_group.target_group_arn }}"
  when: not test_mode | default(true)

- name: Create load balancer
  community.aws.elb_application_lb:
    name: "{{ load_balancer_config.name }}"
    security_groups: ["{{ lb_sg.group_id }}"]
    subnets: "{{ load_balancer_config.subnets }}"
    listeners: "{{ lb_listeners | default([]) }}"
    state: present
    region: "{{ aws_region }}"
    tags:
      AutoRemove: "yes"
  register: load_balancer
  when: not test_mode | default(true)

- name: Register instance with target group
  community.aws.elb_target:
    target_group_arn: "{{ target_group.target_group_arn }}"
    target_id: "{{ test_instance.instances[0].instance_id }}"
    state: present
    region: "{{ aws_region }}"
  when: not test_mode | default(true)

- name: Configure instance SSH settings
  amazon.aws.ec2_instance:
    instance_ids: "{{ test_instance.instances[0].instance_id }}"
    region: "{{ aws_region }}"
    state: present
    user_data: |
      #!/bin/bash
      useradd -m -s /bin/bash {{ ssh_config.user }}
      mkdir -p /home/{{ ssh_config.user }}/.ssh
      echo "{{ lookup('file', ssh_config.public_key_path) }}" > /home/{{ ssh_config.user }}/.ssh/authorized_keys
      chown -R {{ ssh_config.user }}:{{ ssh_config.user }} /home/{{ ssh_config.user }}/.ssh
      chmod 700 /home/{{ ssh_config.user }}/.ssh
      chmod 600 /home/{{ ssh_config.user }}/.ssh/authorized_keys
      echo "{{ ssh_config.user }} ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/{{ ssh_config.user }}
  when: test_instance is defined

- name: Wait for user setup
  pause:
    seconds: 30
  when: test_instance is defined
